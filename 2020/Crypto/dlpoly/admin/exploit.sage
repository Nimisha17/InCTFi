load('given.sage')
from tqdm import *

phi = p^10-1
P.<x> = PolynomialRing(GF(p))
n = P(n^4+5)
q = n.factor()[4][0]
R.<x> = P.quotient(q)
g = R(g)
h = R(h)



def dlp(g, y, p):
    sol = g^2
    if sol == y:
        return 2
    if y == 1:
        return p^5-1
    if y == g:
        return 1
    for i in range(3, p^5-1):
        sol = sol*g
        if sol == y:
            return i
    return None


def pohlighellman(g,y,p,phi):
    factors = ecm.factor(phi)
    factors = { i : factors.count(i) for i in sorted(list(set(factors)))[3:-2]}
#    print(f'[+] Factors: {factors}')

    a,n = [],[]
    for q,e in tqdm(factors.items()):
        x = 0
        G = g^(phi//q)
        Y = y

        for i in trange(e):
#            print(f'[x] Calculating {q**(i+1)}')
            h = Y^(phi//q**(i+1))
            X = dlp(G,h,p)
            assert X != None, f'Got None for brute{G,h,p}'
            x += q^i*X
            Y = Y * g^-X

        a.append(x)
        n.append(q^e)
#    print(f'[+] CRT ( {a}, {n} )')
    x = crt(a,n)
#    assert g^x == y
    return x

print("[+]  Starting Pohlig Hellman")
X = pohlighellman(g,h,p,phi)
flag = b'inctf{'+int.to_bytes(int(X),6,'big')+b'}'
assert flag == b'inctf{bingo!}'
print(flag)
