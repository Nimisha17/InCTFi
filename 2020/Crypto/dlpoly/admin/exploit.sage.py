

# This file was *autogenerated* from the file exploit.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10 = Integer(10); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_6 = Integer(6)
load('given.sage')
from tqdm import *

phi = p**_sage_const_10 -_sage_const_1 
P = PolynomialRing(GF(p), names=('x',)); (x,) = P._first_ngens(1)
n = P(n**_sage_const_4 +_sage_const_5 )
q = n.factor()[_sage_const_4 ][_sage_const_0 ]
R = P.quotient(q, names=('x',)); (x,) = R._first_ngens(1)
g = R(g)
h = R(h)



def dlp(g, y, p):
    sol = g**_sage_const_2 
    if sol == y:
        return _sage_const_2 
    if y == _sage_const_1 :
        return p**_sage_const_5 -_sage_const_1 
    if y == g:
        return _sage_const_1 
    for i in range(_sage_const_3 , p**_sage_const_5 -_sage_const_1 ):
        sol = sol*g
        if sol == y:
            return i
    return None


def pohlighellman(g,y,p,phi):
    factors = ecm.factor(phi)
    factors = { i : factors.count(i) for i in sorted(list(set(factors)))[_sage_const_3 :-_sage_const_2 ]}
#    print(f'[+] Factors: {factors}')

    a,n = [],[]
    for q,e in tqdm(factors.items()):
        x = _sage_const_0 
        G = g**(phi//q)
        Y = y

        for i in trange(e):
#            print(f'[x] Calculating {q**(i+1)}')
            h = Y**(phi//q**(i+_sage_const_1 ))
            X = dlp(G,h,p)
            assert X != None, f'Got None for brute{G,h,p}'
            x += q**i*X
            Y = Y * g**-X

        a.append(x)
        n.append(q**e)
#    print(f'[+] CRT ( {a}, {n} )')
    x = crt(a,n)
#    assert g^x == y
    return x

print("[+]  Starting Pohlig Hellman")
X = pohlighellman(g,h,p,phi)
flag = b'inctf{'+int.to_bytes(int(X),_sage_const_6 ,'big')+b'}'
assert flag == b'inctf{bingo!}'
print(flag)

